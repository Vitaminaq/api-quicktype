@startuml
title 离线模式

actor 用户 as user
participant indexDB as idb
participant UI层 as ui
participant 绘图层 as draw
participant coop服务 as coop
participant web服务 as web

== 断开重连 ==
ui -> draw: 1.uiToCore通知c++
note left #aqua: fullscreen_websocket_api:disconnect
user -> draw: 2.用户继续操作
draw -> ui: 3.c++通过WebMultiplayer_saveNodeChanges发送给前端
ui -> idb: 4.储存节点变更
note left #aqua: pixso-nodes
user -> draw: 5.用户插入图片
draw -> ui: 6.c++通过WebMultiplayer_saveImages发送给前端
ui -> idb: 7.储存图片
note left #aqua: offline-images

== 重新连接 ==
ui -> coop: 1.建立socket连接
ui -> draw: 2.uiToCore通知c++已建立连接
note left #aqua: fullscreen_websocket_api:connect
ui -> idb: 4.检测是否有离线数据(userID、fileKey)
idb --> ui: 5.如果有，则启动恢复流程
ui -> web: 6.上传离线图片
coop -> ui: 6.下载文档
draw -> coop: 生成当前离线版本同步给云端
ui -> draw: 7.发送文档和离线数据给c++合成
draw -> coop: 8.c++合成图层通知前端eventBusForCore('coopBinary')检测网络情况同步云端
draw -> ui: 9.通知前端WebMultiplayer_finishedSync
ui -> idb: 10.清除储存
ui -> user: 11.通知用户

== 重新打开文档 ==
ui -> coop: 1.建立socket连接
ui -> draw: 2.uiToCore通知c++已建立连接
note left #aqua: fullscreen_websocket_api:connect
ui -> idb: 4.检测是否有离线数据(userID、fileKey)
idb --> ui: 5.如果有，则启动恢复流程
ui -> web: 6.生成合成前的历史版本
ui -> web: 6.上传离线图片
coop -> ui: 6.下载文档
draw -> coop: 生成当前离线版本同步给云端
ui -> draw: 7.发送文档和离线数据给c++合成
draw -> coop: 8.c++合成图层通知前端eventBusForCore('coopBinary')检测网络情况同步云端
draw -> ui: 9.根据成功失败情况通知前端WebMultiplayer_finishedSync
ui -> idb: 10.清除储存
ui -> web: 11.生成合并后的历史版本
ui -> user: 12.通知用户

footer applyAutosavedChanges有啥用

@enduml

@startuml
participant 前端 as ui
participant c as draw

title 前端、c++交互逻辑

ui -> draw: 同步离线数据-loadAutosavedNodeChanges
ui -> draw: 同步文档-ws syncNewSendMessagesToCore("loadFicFile")
ui -> draw: 同步协同-ws syncNewSendMessagesToCore("receiveCoop")
@enduml 